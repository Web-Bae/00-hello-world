name: Run Tests

on:
  pull_request_target:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      # This checks out the code in the base branch (e.g., main)
      - name: Checkout repository
        uses: actions/checkout@v2

      # This manually fetches and checks out the code from the PR
      - name: Manually checkout PR
        run: |
          git fetch origin ${GITHUB_REF}:pr_branch
          git checkout pr_branch

      # Rest of your setup steps
      - name: Setup caching for node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run test:remote
        id: tests
        continue-on-error: true

      - name: Set result
        id: result
        run: |
          if [[ "${{ steps.tests.outcome }}" == "success" ]]; then
            echo "state=passed" >> $GITHUB_ENV
          else
            echo "state=failed" >> $GITHUB_ENV
          fi

      - name: Comment PR with feedback
        if: always() # this ensures the step runs even if previous steps fail
        uses: actions/github-script@v5
        with:
          github-token: ${{secrets.BAE_PAT}}
          script: |
            const { owner, repo, number } = context.issue;
            let conclusion = process.env.state === 'passed' ? 'passed ðŸŽ‰' : 'failed ðŸ¥º';
            const output = `Your tests ${conclusion}.`
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: output
            });

      - name: Fail workflow if tests failed
        if: env.state == 'failed'
        run: exit 1
